# -*- coding: utf-8 -*-
"""

"""

from FFS_dp2 import dp2
from sklearn.feature_selection import chi2,SelectKBest
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score,GridSearchCV
from sklearn.pipeline import make_pipeline
import time
from numpy import array
import numpy as np


X_train,X_test,y_train,y_test,_ = dp2("./data/train_dc23dp1.csv","./data/test_dc23dp1.csv")

scores=[]
start=time.time()
for i in range(1,len(X_train[0])+1):
    pipeline = make_pipeline(
        SelectKBest(score_func=chi2,k=i),
        RandomForestClassifier(random_state=41)
        )
    scores.append(cross_val_score(pipeline, X_train, y_train, cv=5, scoring="f1_macro"))
    print(i)
end=time.time()
tottime=end-start
print(tottime)

#5-fold cross validation time 5966.97212600708s, best k
'''
#The following scores is from the above scores.
scores=[array([0.50691883, 0.63709167, 0.56609118, 0.59673937, 0.16440943]), array([0.5325387 , 0.65377788, 0.63193267, 0.62332034, 0.6721276 ]), array([0.58137384, 0.70105469, 0.61125717, 0.64384358, 0.56065708]), array([0.68512843, 0.67613502, 0.68952604, 0.66508126, 0.57682966]), array([0.68507353, 0.72227203, 0.7136362 , 0.71943564, 0.6740404 ]), array([0.70180827, 0.72283048, 0.74215281, 0.73413279, 0.73241054]), array([0.72295217, 0.72459524, 0.7425811 , 0.6970608 , 0.70632563]), array([0.7036051 , 0.72945867, 0.73364843, 0.73851573, 0.69313246]), array([0.7062725 , 0.72614006, 0.73943801, 0.73379525, 0.70740832]), array([0.70992616, 0.73254892, 0.74318417, 0.67359326, 0.71819432]), array([0.7247267 , 0.73686194, 0.74709087, 0.68577794, 0.71681972]), array([0.73295352, 0.73842785, 0.74708553, 0.68990371, 0.73658848]), array([0.72533314, 0.73292463, 0.74222841, 0.66256071, 0.72612771]), array([0.73006575, 0.73430228, 0.72326417, 0.6844023 , 0.72718335]), array([0.7316941 , 0.73452769, 0.73716747, 0.69054621, 0.72752116]), array([0.73225893, 0.73361859, 0.75175706, 0.68031952, 0.74030093]), array([0.73762905, 0.73032424, 0.72824897, 0.66856207, 0.73201336]), array([0.70038484, 0.73490265, 0.74839899, 0.68523322, 0.73094146]), array([0.69711874, 0.73807774, 0.74353141, 0.69923218, 0.73737912]), array([0.7039107 , 0.7348772 , 0.74258333, 0.69377626, 0.72062603]), array([0.7050966 , 0.73087532, 0.74069708, 0.69984068, 0.72961006]), array([0.71557395, 0.73538334, 0.74441562, 0.70025972, 0.73425832]), array([0.71075564, 0.73560942, 0.74765412, 0.69412823, 0.73272462]), array([0.71394861, 0.74368744, 0.75164019, 0.69077686, 0.72998393]), array([0.71207609, 0.74348054, 0.75510875, 0.69631268, 0.72545302]), array([0.71557982, 0.74327083, 0.74768113, 0.687681  , 0.72358603]), array([0.70683216, 0.74252395, 0.7332224 , 0.6913618 , 0.73346656]), array([0.71291153, 0.74405193, 0.72523896, 0.69120537, 0.735073  ]), array([0.71464344, 0.74372621, 0.72489241, 0.69324972, 0.72693026]), array([0.70952886, 0.73978282, 0.73948431, 0.69428947, 0.74491574]), array([0.70650127, 0.74118402, 0.73757313, 0.69123365, 0.74319975]), array([0.70667748, 0.73916137, 0.72606326, 0.6957683 , 0.76575663]), array([0.70907496, 0.73976535, 0.72287897, 0.69389452, 0.76566799]), array([0.71957215, 0.74274244, 0.73093018, 0.70258684, 0.75591481]), array([0.70136312, 0.7447189 , 0.7264506 , 0.69727723, 0.77521669]), array([0.65577907, 0.74616056, 0.73422662, 0.68322468, 0.76170437]), array([0.66296439, 0.7713082 , 0.72764957, 0.69289283, 0.75740188]), array([0.66695871, 0.76065858, 0.73085756, 0.69284919, 0.76023075]), array([0.66986709, 0.76639069, 0.73047058, 0.71610827, 0.76563046]), array([0.76829347, 0.75167097, 0.73009581, 0.72700084, 0.75749691]), array([0.76452314, 0.75318175, 0.7165439 , 0.72657892, 0.78689248]), array([0.77028238, 0.75034985, 0.72264558, 0.73214576, 0.77720094]), array([0.76495917, 0.74628401, 0.79964141, 0.73217073, 0.77769963]), array([0.75947607, 0.75080661, 0.78984836, 0.72908789, 0.77618299]), array([0.75655769, 0.74583999, 0.78191146, 0.73134535, 0.78531188]), array([0.76752871, 0.74770406, 0.8056045 , 0.73290812, 0.77199952]), array([0.76759767, 0.74292208, 0.79662832, 0.73096418, 0.78014918]), array([0.76929614, 0.74225512, 0.79142511, 0.73042015, 0.78166906]), array([0.77489204, 0.74625831, 0.79496178, 0.73175937, 0.79450849]), array([0.77904265, 0.74174749, 0.79279545, 0.72932197, 0.7926195 ]), array([0.77980834, 0.75429802, 0.79405906, 0.72688627, 0.78035201]), array([0.7760881 , 0.75408309, 0.80345152, 0.74425128, 0.77979268]), array([0.78408837, 0.76009426, 0.8113798 , 0.74189345, 0.7790107 ]), array([0.78317589, 0.75849607, 0.805683  , 0.7453236 , 0.79064968]), array([0.78431386, 0.74813144, 0.79498374, 0.7420993 , 0.77984362]), array([0.7755809 , 0.747681  , 0.78769607, 0.73492128, 0.82730948]), array([0.73971725, 0.74335637, 0.79570779, 0.85769271, 0.82860933]), array([0.68499842, 0.49024761, 0.85340962, 0.86548974, 0.83433402]), array([0.52339113, 0.4526263 , 0.84680074, 0.86506483, 0.84664602]), array([0.52303142, 0.30903123, 0.84591801, 0.86747417, 0.83693683]), array([0.57718953, 0.29948321, 0.847449  , 0.86859712, 0.83963028]), array([0.58791782, 0.32813112, 0.85691517, 0.86915455, 0.84051398]), array([0.66389883, 0.29369596, 0.8506409 , 0.86283857, 0.85322897]), array([0.68997369, 0.27924588, 0.8625349 , 0.86962774, 0.85136395]), array([0.58932732, 0.28510859, 0.85467309, 0.8687684 , 0.8485845 ]), array([0.70479744, 0.29394365, 0.85902875, 0.86640751, 0.85243246]), array([0.58336033, 0.29143096, 0.85786842, 0.85658082, 0.84679985]), array([0.54626353, 0.29541344, 0.86137454, 0.8621069 , 0.84637639]), array([0.70261664, 0.28544824, 0.85056204, 0.86676877, 0.83878363])]
scores_mean=[]
for i in range(len(scores)):
    scores_mean.append(scores[i].mean())
bestk=np.argmax(scores_mean)
print(bestk)
'''
